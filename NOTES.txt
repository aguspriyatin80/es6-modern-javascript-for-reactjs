PART 01: INTRODUCTION
# ES6 Fitures:
- Variable creation using 'let' and 'const'
- Template Strings
- Arrow Functions
- Rest and Spread Operator
- Destructuring
- Array functions: find(), findIndex(), map(), reduce(), filter()
- Classes
- Promises, etc.
# Babel
- It is a preprocessor Javascript/ECMAScript. 
- It is mainly used to convert ES6+ code into a backwards compatible version of Javascript than can be run by older browser
- babeljs.io 

PART 02: VARIABEL CREATING USING 'LET' AND 'CONST'
# Creating Variables
- ES6 introduced two new ways to create Variables
- 'let' : it is like a replacement for 'var'
- for example:
let mName = "Agus"
let mSum = 100
- 'const': it used to create variables with constant values also known as constants. The variables created using const cannot be updated later in the code. 
- For example:
const API_URL = "http://api.test.com/v1"

PART 03: TEMPLATE STRINGS
/*
It is just a string which allows embedding expressions inside it.
To create a template string you don't use single or double quotes,
you use backtick(``). The expression are embedded by wrapping them inside ${}.
For example:
const mGreetings = `Hello ${name}`
Here, the expression is a  variabel.
const moreGreetings = `Hello ${fullName()}`
Here, the expression is function call
*/

PART 04: ARROW FUNCTIONS
/*
ES6 gives us a new syntax for defining functions using a fat arrow (=>)
Arrow functions bring a lot of clarity & code reduction.
Syntax:
function greetings(name){
    return('Welcome ' + name)
}
const greetings = (name) => {
    return(`Welcome ${name}`)
}
*/

PART 05: REST PARAMETER 
- Dengan REST parameter dapat mengenali banyak argumen
- Jika parameter banyak maka REST PARAMETER harus diletakan paling belakang / akhir
- contoh:
const sum = (...args) => console.log(args)

PART 06: SPREAD OPERATOR
/*
# Spread syntax allow array and object to be expanded into:
- elements in case of array
- key-value pairs in case of object
# bisa digunakan untuk membuat copy dari array lainnya, tetapi tidak mereference ke array yang dicopy
# bisa digunakan untuk menggabungkan dua array/object atau lebih seperti method concat
# tidak harus diletakkan pada parameter terakhir, tetapi sesuai kebutuhan
*/
PART 07: DESTRUCTURING 
/*
It allows to "unpack" arrays or objects into a bunch of variables which
makes working with arrays and objects a bit more convenient
Syntax:
let [a,b] = [1,2,3,4,5]
let {name, age} = {firstName:"Agus", lastName:"Priyatin", age:30}
*/
